package com.telegram_bots.bookbot.bot.service;

import com.telegram_bots.bookbot.model.dto.LitresBookDto;
import com.telegram_bots.bookbot.model.entities.enums.BookStatus;
import com.telegram_bots.bookbot.utils.ButtonUtils;
import com.telegram_bots.bookbot.utils.WelcomeMessageProvider;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import com.telegram_bots.bookbot.model.entities.Book;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class MessageService {

    private final WelcomeMessageProvider welcomeMessageProvider;

    public MessageService(WelcomeMessageProvider welcomeMessageProvider) {
        this.welcomeMessageProvider = welcomeMessageProvider;
    }

    public SendMessage createSimpleMessage(Long chatId, String text) {
        return createSimpleMessage(String.valueOf(chatId), text);
    }

    public SendMessage createSimpleMessage(String chatId, String text) {
        return SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .build();
    }

    public SendMessage buildWelcomeMessage(Long chatId) {
        return buildWelcomeMessage(String.valueOf(chatId));
    }

    public SendMessage buildWelcomeMessage(String chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(ButtonUtils.createButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–Ω–∏–≥–∏", "show_books"));
        row.add(ButtonUtils.createButton("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "add_book"));
        row.add(ButtonUtils.createButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "show_stats"));
        markup.setKeyboard(List.of(row));

        return SendMessage.builder()
                .chatId(chatId)
                .text(welcomeMessageProvider.getRandomMessage())
                .replyMarkup(markup)
                .build();
    }


    public SendMessage buildRequestBookTitleMessage(Long chatId) {
        return buildRequestBookTitleMessage(String.valueOf(chatId));
    }

    public SendMessage buildRequestBookTitleMessage(String chatId) {
        return createSimpleMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞:");
    }


    public SendMessage buildBookSearchResults(Long chatId, List<LitresBookDto> books) {
        return buildBookSearchResults(String.valueOf(chatId), books);
    }

    public SendMessage buildBookSearchResults(String chatId, List<LitresBookDto> books) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (int i = 0; i < books.size(); i++) {
            LitresBookDto book = books.get(i);
            String text = book.getTitle() + " - " + book.getAuthor();
            String callback = "select_book:" + i;
            rows.add(List.of(ButtonUtils.createButton(text, callback)));
        }

        rows.add(List.of(ButtonUtils.createButton("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_added_book")));

        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(rows).build();

        return SendMessage.builder()
                .chatId(chatId)
                .text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:")
                .replyMarkup(markup)
                .build();
    }

    public SendMessage buildNoBooksFoundMessage(Long chatId) {
        return buildNoBooksFoundMessage(String.valueOf(chatId));
    }

    public SendMessage buildNoBooksFoundMessage(String chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = List.of(ButtonUtils.createButton("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_added_book"));
        markup.setKeyboard(List.of(row));

        return SendMessage.builder()
                .chatId(chatId)
                .text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üò¢\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑, –º–æ–∂–µ—Ç –æ–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–µ?")
                .replyMarkup(markup)
                .build();
    }

    public SendMessage buildCancelledMessage(Long chatId) {
        return buildCancelledMessage(String.valueOf(chatId));
    }

    public SendMessage buildCancelledMessage(String chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(ButtonUtils.createButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–Ω–∏–≥–∏", "show_books"));
        row.add(ButtonUtils.createButton("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "add_book"));
        markup.setKeyboard(List.of(row));

        return SendMessage.builder()
                .chatId(chatId)
                .text("üìñ –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –∫–Ω–∏–∂–∫–∞ –ø–æ–¥–æ–∂–¥—ë—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞ ‚òÅÔ∏è")
                .replyMarkup(markup)
                .build();
    }

    public SendMessage buildUnknownCommandMessage(Long chatId) {
        return buildUnknownCommandMessage(String.valueOf(chatId));
    }

    public SendMessage buildUnknownCommandMessage(String chatId) {
        return createSimpleMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start");
    }

    public SendMessage buildUnknownCallbackMessage(Long chatId) {
        return buildUnknownCallbackMessage(String.valueOf(chatId));
    }

    public SendMessage buildUnknownCallbackMessage(String chatId) {
        return createSimpleMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }

    public SendMessage buildBookAddedMessage(Long chatId, String title) {
        return buildBookAddedMessage(String.valueOf(chatId), title);
    }

    public SendMessage buildBookAddedMessage(String chatId, String title) {
        return createSimpleMessage(chatId, "–ö–Ω–∏–≥–∞ \"" + title + "\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ üìö");
    }

    public SendMessage buildBookNotFoundByIndexMessage(Long chatId) {
        return buildBookNotFoundByIndexMessage(String.valueOf(chatId));
    }

    public SendMessage buildBookNotFoundByIndexMessage(String chatId) {
        return createSimpleMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.");
    }

    public String buildBooksText(List<Book> books, BookStatus filter) {
        StringBuilder text = new StringBuilder("üìö *–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥*");
        if (filter != null) {
            text.append(" (").append(filter.getDisplayNameRu()).append(")");
        }
        text.append(":\n\n");

        if (books.isEmpty()) {
            text.append("–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
        } else {
            for (Book book : books) {
                text.append(book.getTitle())
                        .append(" - ")
                        .append(book.getAuthor())
                        .append(" - ")
                        .append(book.getStatus().getDisplayNameRu())
                        .append("\n");
            }
        }

        return text.toString();
    }

    public List<List<InlineKeyboardButton>> buildBookButtons(List<Book> books) {
        return books.stream()
                .map(book ->
                        List.of(ButtonUtils.createButton(book.getTitle(), "manage_book:" + book.getId())))
                .collect(Collectors.toList());
    }

    public List<InlineKeyboardButton> buildPaginationButtons(int currentPage, int totalBooks, int pageSize) {
        List<InlineKeyboardButton> buttons = new ArrayList<>();

        if (currentPage > 0) {
            buttons.add(ButtonUtils.createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "books_prev_page"));
        }
        if ((currentPage + 1) * pageSize < totalBooks) {
            buttons.add(ButtonUtils.createButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", "books_next_page"));
        }
        return buttons;
    }

    public List<List<InlineKeyboardButton>> buildFilterAndAddButtons() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(ButtonUtils.createButton("üìÇ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "change_filter")));
        rows.add(List.of(ButtonUtils.createButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "add_book")));
        return rows;
    }

    public SendMessage buildBookMenuMessage(Long chatId, Optional<Book> optionalBook) {
        return buildBookMenuMessage(String.valueOf(chatId), optionalBook);
    }

    public SendMessage buildBookMenuMessage(Long chatId, Book optionalBook) {
        return buildBookMenuMessage(String.valueOf(chatId), optionalBook);
    }

    public SendMessage buildBookMenuMessage(String chatId, Optional<Book> optionalBook) {
        if (optionalBook.isEmpty()) {
            return createSimpleMessage(chatId, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞..");
        }
        return buildBookMenuMessage(chatId, optionalBook.get());
    }

    public SendMessage buildBookMenuMessage(String chatId, Book book) {
        String text = "üìñ *" + book.getTitle() + "*\n" +
                "‚úçÔ∏è –ê–≤—Ç–æ—Ä: " + book.getAuthor() + "\n" +
                "üìä –°—Ç–∞—Ç—É—Å: " + book.getStatus().getDisplayNameRu() + "\n" +
                "üìà –°—Ç—Ä–∞–Ω–∏—Ü–∞: " + (book.getCurrentPage() == null ? 0 : book.getCurrentPage()) + "\n" +
                "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: " + (book.getRating() == null ? 0 : book.getRating()) + "\n";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(ButtonUtils.createButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "change_status:" + book.getId())));
        rows.add(List.of(ButtonUtils.createButton("üìà –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", "update_page:" + book.getId())));
        rows.add(List.of(ButtonUtils.createButton("‚≠êÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", "rate_book:" + book.getId())));
        rows.add(List.of(ButtonUtils.createButton("üóë –£–¥–∞–ª–∏—Ç—å", "delete_book:" + book.getId())));
        rows.add(List.of(ButtonUtils.createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show_books")));

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(markup);
        message.setParseMode("Markdown");

        return message;
    }

    public SendMessage buildRequestPageInputMessage(Long chatId) {
        return buildRequestPageInputMessage(String.valueOf(chatId));
    }

    public SendMessage buildRequestPageInputMessage(String chatId) {
        return createSimpleMessage(chatId, "–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:");
    }

    public SendMessage buildRequestRatingInputMessage(Long chatId) {
        return createSimpleMessage(chatId, "–ü–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:");
    }
    public SendMessage buildDeletedBookMessage(Long chatId) {
        return createSimpleMessage(chatId, "üìñ –ö–Ω–∏–∂–∫–∞ —Ç–∏—Ö–æ–Ω—å–∫–æ –ø–æ–∫–∏–Ω—É–ª–∞ –ø–æ–ª–æ—á–∫—É –∏ –æ—Å–≤–æ–±–æ–¥–∏–ª–∞ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π");
    }

    public List<SendMessage> buildUpdatedPageMessage(Long chatId, int page, Book book) {
        SendMessage updateMessage = createSimpleMessage(chatId, "–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: " + page);
        SendMessage menuMessage = buildBookMenuMessage(chatId, book);
        return List.of(updateMessage, menuMessage);
    }

    public List<SendMessage> buildUpdatedRatingMessage(Long chatId, int rating, Book book) {
        SendMessage updateMessage = createSimpleMessage(chatId, "–û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: " + rating + " ‚≠êÔ∏è");
        SendMessage menuMessage = buildBookMenuMessage(chatId, book);
        return List.of(updateMessage, menuMessage);
    }

    public List<SendMessage> buildUpdatedStatusMessage(Long chatId, BookStatus status, Book book) {
        SendMessage updateMessage = createSimpleMessage(chatId, "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: " + status.getDisplayNameRu());
        SendMessage menuMessage = buildBookMenuMessage(chatId, book);
        return List.of(updateMessage, menuMessage);
    }

    public List<SendMessage> buildCancelledUpdateMessage(Long chatId, Book book) {
        SendMessage updateMessage = createSimpleMessage(chatId, "üìö –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ö–Ω–∏–≥–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Ç–≤–æ–µ–º —É—é—Ç–Ω–æ–º —Å–ø–∏—Å–∫–µ");
        SendMessage menuMessage = buildBookMenuMessage(chatId, book);
        return List.of(updateMessage, menuMessage);
    }
}
