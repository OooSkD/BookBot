package com.telegram_bots.bookbot.bot;

import com.telegram_bots.bookbot.model.dto.LitresBookDto;
import com.telegram_bots.bookbot.model.entities.Book;
import com.telegram_bots.bookbot.model.entities.User;
import com.telegram_bots.bookbot.service.BookService;
import com.telegram_bots.bookbot.service.UserStateService;
import com.telegram_bots.bookbot.service.LitresService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

//TODO —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã —Ä–∞–∑–±–∏—Ç—å
@Component
public class MyTelegramBot extends TelegramLongPollingBot {

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    @Value("${book.title.maxLength}")
    private int maxLengthTitle;

    @Value("${book.searchResult.maxCount}")
    private int maxCountBooks;
    private final BookService bookService;
    private final UserStateService userStateService;
    private final LitresService litresService;

    public MyTelegramBot(BookService bookService,
                         UserStateService userStateService,
                         LitresService litresService) {
        this.bookService = bookService;
        this.userStateService = userStateService;
        this.litresService = litresService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    private void sendTextMessage(Long userId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(userId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendFullMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendBookList(Long userId) {
        List<Book> books = bookService.getAllBooksOfUser(userId);
        StringBuilder bookListText = new StringBuilder("–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:\n");

        for (Book book : books) {
            bookListText.append(book.getTitle() + " - " + book.getAuthor() + " - " + book.getStatus().getDisplayNameRu()).append("\n");
        }

        SendMessage message = new SendMessage();
        message.setChatId(userId.toString());
        message.setText(bookListText.toString());

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton button = new InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É");
        button.setCallbackData("add_book");
        row.add(button);
        markup.setKeyboard(List.of(row));

        message.setReplyMarkup(markup);
        sendFullMessage(message);
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Long userId = update.getMessage().getFrom().getId();

            if (update.getMessage().hasText()) {
                String messageText = update.getMessage().getText();

                if (messageText.equals("/start") || messageText.toLowerCase().contains("–ø—Ä–∏–≤–µ—Ç")) {
                    sendWelcomeMessage(userId);
                    return;
                }

                // –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
                if (userStateService.isWaitingForBookTitle(userId)) {
                    String bookTitle = messageText;
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ litres
                    sendSearchResults(bookTitle, userId);
                    return;
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Long userId = update.getCallbackQuery().getFrom().getId();
            String command = callbackData.contains(":") ? callbackData.substring(0, callbackData.indexOf(":")) : callbackData;
            switch (command) {
                case "add_book":
                    userStateService.setWaitingForBookTitle(userId, true); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∂–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    requestBookTitle(userId);
                    break;
                case "show_books":
                    sendBookList(userId);
                    break;
                case "cancel_add_book":
                    userStateService.setWaitingForBookTitle(userId, false);
                    sendTextMessage(userId, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
                    break;
                case "select_book":
                    String data = callbackData.substring("select_book:".length());
                    //String[] parts = data.split("\\|");
                    //String title = parts[0];
                    //String author = parts.length > 1 ? parts[1] : "";
                    //TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å. –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∏–∑ –∫—ç—à–∞
                    String[] parts = data.split("\\|");
                    List<LitresBookDto> foundBooks = litresService.searchBooks(parts[0]);
                    String title = foundBooks.get(parts[1].charAt(0) - '0').getTitle();
                    String author = foundBooks.get(parts[1].charAt(0) - '0').getAuthor();

                    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    bookService.addBook(userId, title, author);
                    sendTextMessage(userId, "–ö–Ω–∏–≥–∞ \"" + title + "\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ üìö");
                    sendWelcomeMessage(userId);
                    break;
            }
        }
    }

    private void sendWelcomeMessage(Long userId) {
        SendMessage message = new SendMessage();
        message.setChatId(userId.toString());
        message.setText("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫–Ω–∏–∂–Ω—ã–π –±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton addBookButton = new InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É");
        addBookButton.setCallbackData("add_book");

        InlineKeyboardButton showBooksButton = new InlineKeyboardButton("–ú–æ–∏ –∫–Ω–∏–≥–∏");
        showBooksButton.setCallbackData("show_books");

        row.add(addBookButton);
        row.add(showBooksButton);
        markup.setKeyboard(List.of(row));

        message.setReplyMarkup(markup);

        sendFullMessage(message);
    }

    private void requestBookTitle(Long userId) {
        SendMessage message = new SendMessage();
        message.setChatId(userId.toString());
        message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton cancelButton = new InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("cancel_add_book");
        row.add(cancelButton);
        markup.setKeyboard(List.of(row));

        message.setReplyMarkup(markup);

        sendFullMessage(message);
    }

    private void sendSearchResults(String bookTitle, Long chatId) {
        List<LitresBookDto> foundBooks = litresService.searchBooks(bookTitle);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:");

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        int n = Math.min(foundBooks.size(), maxCountBooks);
        for (int i = 0; i < n; i++) {
            String currentBookAuthor = foundBooks.get(i).getAuthor();
            String currentBookTitle = foundBooks.get(i).getTitle();
            if (currentBookTitle.length() > maxLengthTitle) {
                foundBooks.get(i).setTitle(currentBookTitle.substring(0, maxLengthTitle));
            }
            String bookText = "üìñ " + currentBookTitle + "\n‚úçÔ∏è " + currentBookAuthor;
            SendMessage bookMessage = new SendMessage(chatId.toString(), bookText);

            InlineKeyboardButton selectButton = new InlineKeyboardButton();
            selectButton.setText("‚úÖ –í—ã–±—Ä–∞—Ç—å");
            //TODO: —ç—Ç–æ –ø–ª–æ—Ö–æ –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
            //TODO: —Å–¥–µ–ª–∞—Ç—å –∫—ç—à, –≥–¥–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞,
            // –ø–æ–∫–∞ –±–µ–∑ redis, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ –∫–Ω–∏–≥–∏ –Ω–µ –±—É–¥–µ—Ç –≤ –∫—ç—à–µ, –∞ –º—ã –µ–µ —Ç–∞–º –æ–∂–∏–¥–∞–µ–º
            selectButton.setCallbackData("select_book:" + bookTitle + "|" + i);

            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(selectButton);

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            markup.setKeyboard(List.of(row));

            bookMessage.setReplyMarkup(markup);
            sendFullMessage(bookMessage);
        }

        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –≤–Ω–∏–∑—É
        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("cancel_add_book");

        InlineKeyboardMarkup cancelMarkup = new InlineKeyboardMarkup();
        cancelMarkup.setKeyboard(List.of(List.of(cancelButton)));

        SendMessage cancelMessage = new SendMessage(chatId.toString(), " ");
        cancelMessage.setReplyMarkup(cancelMarkup);
        sendFullMessage(cancelMessage);
    }
}
